def execute_emoji_stack(program):
    stack = [0] * 256  # Initialize a stack of 256 cells with 0
    pointer = 0        # Stack pointer starting at the first cell
    output = []        # To store the output characters

    i = 0
    while i < len(program):
        command = program[i]
        
        if command == '游녤':
            pointer = (pointer + 1) % 256  # Move pointer right, wrapping around at the end
        elif command == '游녣':
            pointer = (pointer - 1) % 256  # Move pointer left, wrapping around at the start
        elif command == '游녨':
            stack[pointer] = (stack[pointer] + 1) % 256  # Increment, wrapping at 255
        elif command == '游녩':
            stack[pointer] = (stack[pointer] - 1) % 256  # Decrement, wrapping at 0
        elif command == '游눫':
            output.append(chr(stack[pointer]))  # Convert cell value to ASCII character
        elif command == '游대' and i + 2 < len(program):
            # Check if the next two characters are valid hex digits
            repeat_count = int(program[i+1:i+3], 16)  # Get the repeat count in hex
            last_command = program[i-1]
            for _ in range(repeat_count):
                # Repeat the last command
                if last_command == '游녤':
                    pointer = (pointer + 1) % 256
                elif last_command == '游녣':
                    pointer = (pointer - 1) % 256
                elif last_command == '游녨':
                    stack[pointer] = (stack[pointer] + 1) % 256
                elif last_command == '游녩':
                    stack[pointer] = (stack[pointer] - 1) % 256
                elif last_command == '游눫':
                    output.append(chr(stack[pointer]))
            i += 2  # Skip over the two hex digits
        i += 1

    return ''.join(output)


# Example program execution
program = "游녤游녤游녤游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대08游녨游대34游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游대48游녤游대15游녨游대5e游녣游대07游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대02游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游대42游녤游대02游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대17游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대14游녨游대20游녤游대06游녨游대51游녤游대0c游녨游대34游녤游녤游녨游대46游녣游대14游녨游대4d游녣游대01游녨游대51游녤游대04游녨游대20游녤游대03游녨游대2f游녤游녤游녤游녤游녤游녤游녤游녤游녨游대4d游녣游대17游녨游대42游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游대7c游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대0c游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대0c游녨游대32游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대04游녨游대5e游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游대47游녣游대0f游녨游대46游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대03游녨游대20游녣游대08游녨游대5e游녤游대10游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대1d游녨游대40游녤游대10游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游녤游녤游녤游녨游대5e游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫"  # Example input program
print(execute_emoji_stack(program))  # Output the result
